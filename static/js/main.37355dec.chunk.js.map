{"version":3,"sources":["img/forecast/006-thunderstorm.svg","img/forecast/019-raining.svg","img/forecast/023-rain-4.svg","img/forecast/016-snowing-1.svg","img/forecast/031-cloudy.svg","img/forecast/013-sunny.svg","img/forecast/035-cloud.svg","img/forecast/empty.svg","serviceWorker.js","redux/store.js","redux/reducers.js","components/Search/Search.jsx","redux/actions.js","components/Background/Background.jsx","utils/functions.js","components/Info/Dashboard.jsx","components/Info/Info.jsx","components/Slider/Slider.jsx","components/Empty/Empty.jsx","App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","store","createStore","state","type","payload","data","current","forecast","search","__REDUX_DEVTOOLS_EXTENSION__","Search","_","useStore","useState","city","setCity","dispatch","useDispatch","handleSubmit","e","preventDefault","trim","pushDataToState","fetch","then","response","json","cod","coord","lat","lon","setForecast","catch","err","console","log","fetchCity","getState","getCityByLocation","useCallback","navigator","geolocation","getCurrentPosition","position","res","error","useEffect","className","onSubmit","placeholder","value","onChange","target","onBlur","Background","getDay","number","getMonth","getIcon","id","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Dashboard","weather","main","src","alt","Math","round","temp","toFixed","feels_like","Date","getDate","getFullYear","Info","wind","humidity","pressure","speed","deg","getWindDirection","createInfoItems","Slider","innerWidth","size","setSize","addEventListener","Object","keys","length","daily","map","i","k","min","max","day","night","eve","morn","nextDay","nextDayTimestamp","now","key","slidesPerView","loop","renderDynamicSlides","Empty","Storm","App","connect","values","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,uJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCPOC,EAAQC,aCXM,SAACC,EAAD,GAA+B,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACzC,OAAQD,GACN,IAAK,cACH,OAAO,2BACFD,GADL,IAEEG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBC,QAASF,MAGpC,IAAK,eACH,OAAO,2BACFF,GADL,IAEEG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBE,SAAUH,MAGrC,IAAK,gBACH,OAAO,2BACFF,GADL,IAEEM,OAAQJ,IAGZ,QACE,OAAO,eACFF,MDnBiB,CAC1BG,KAAM,CACJC,QAAS,GACTC,SAAU,IAEZC,OAAQ,IAMRZ,OAAOa,8BAAgCb,OAAOa,gC,QEVnCC,EAAS,SAAAC,GACpB,IAAMX,EAAQY,cACd,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAEXC,EAAe,SAAAC,GAGnB,GAFAA,EAAEC,iBAECN,GAAwB,KAAhBA,EAAKO,OACd,OAAOC,EAAgBR,IAIrBQ,EAAkB,SAAAd,GACtB,OAAOe,MAAM,qDAAD,OAAsDf,EAAtD,4CACXgB,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAnB,GACLW,ECpBG,CACLb,KAAM,cACNC,QDkBsBC,IAEJ,QAAbA,EAAKsB,KAENJ,MAAM,uDAAD,OAAwDlB,EAAKuB,MAAMC,IAAnE,gBAA8ExB,EAAKuB,MAAME,IAAzF,mFACFN,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAnB,GAAI,OAAIW,ECpBE,SAAAZ,GACzB,MAAO,CACLD,KAAM,eACNC,WDiB8B2B,CAAY1B,OACnC2B,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,UAO7BG,EAAY,SAACtB,GACjBC,EAAQD,GACRE,ECtBK,CACLb,KAAM,gBACNC,QDoBsBU,IACtBQ,EAAgBtB,EAAMqC,WAAW7B,SAG7B8B,EAAoBC,uBAAY,WACjC,gBAAiBC,UAClBA,UAAUC,YAAYC,oBACpB,SAAAC,GACEpB,MAAM,+CACHC,MAAK,SAAAoB,GAAG,OAAIA,EAAIlB,UAChBF,MAAK,SAAAnB,GACJ+B,EAAU/B,EAAKS,YAGrB,SAAA+B,GACET,EAAU,WAKdA,EAAU,UAEX,CAACpB,IAMJ,OAJA8B,qBAAU,WACRR,MACC,CAACA,IAGF,0BAAMS,UAAU,cAAcC,SAAW9B,GACvC,2BACEf,KAAK,OACL8C,YAAY,YACZC,MAAOpC,EACPiC,UAAU,0BACVI,SAvCa,SAAChC,GAAD,OAAOJ,EAAQI,EAAEiC,OAAOF,QAwCrCG,OAAQnC,IAEV,0BAAM6B,UAAU,qBAEhB,2BACE5C,KAAK,SACL4C,UAAU,iBACVG,MAAM,OE9EDI,G,OAAa,SAAA3C,GACxB,OACE,yBAAKoC,UAAU,2BACb,yBAAKA,UAAU,uB,8HCGRQ,EAAS,SAAAC,GAGpB,MAFa,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE7CA,EAAS,IAGVC,EAAW,SAAAD,GAGtB,MAFe,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEhFA,IAGHE,EAAU,SAAAC,GACrB,OAAGA,GAAM,KAAOA,EAAK,IAAYC,IACzBD,GAAM,KAAOA,EAAK,IAAYE,IAC9BF,GAAM,KAAOA,EAAK,IAAYG,IAC9BH,GAAM,KAAOA,EAAK,IAAYI,IAC9BJ,GAAM,KAAOA,EAAK,IAAYK,IACvB,MAAPL,EAAmBM,IACnBN,GAAM,KAAOA,EAAK,IAAYO,SAAjC,GCxBMC,EAAY,SAAC,GAAiB,IAAf7D,EAAc,EAAdA,QAClB8D,EAAkB9D,EAAlB8D,QAASC,EAAS/D,EAAT+D,KAEjB,MAAmB,QAAhB/D,EAAQqB,IAAsB,KAE/B,6BAASoB,UAAU,aACjB,yBAAKA,UAAU,mBACb,yBAAKuB,IAAKZ,EAAQU,EAAQ,GAAGT,IAAKY,IAAKb,EAAQU,EAAQ,GAAGC,MAAOtB,UAAU,0BAC3E,uBAAGA,UAAU,uCACVqB,EAAQ,GAAGC,OAGhB,yBAAKtB,UAAU,0BACb,wBAAIA,UAAU,uDACVyB,KAAKC,MAAMJ,EAAKK,KAAO,QAASC,QAAQ,GAD5C,SAGA,wBAAI5B,UAAU,kEAAd,cACeyB,KAAKC,MAAMJ,EAAKO,WAAa,QAASD,QAAQ,GAD7D,UAIF,yBAAK5B,UAAU,mBACb,uBAAGA,UAAU,uCACVQ,GAAO,IAAIsB,MAAOC,WADrB,KACkC,0BAAM/B,UAAU,iBAAgB,IAAI8B,MAAOC,UAA3C,IAAuDrB,GAAS,IAAIoB,MAAOpB,YAA3E,KAAyF,IAAIoB,MAAOE,mBCtBjIC,EAAO,SAAC,GAAiB,IAAf1E,EAAc,EAAdA,QACb+D,EAAe/D,EAAf+D,KAAMY,EAAS3E,EAAT2E,KA8Bd,MAAmB,QAAhB3E,EAAQqB,IAAsB,KAE/B,wBAAIoB,UAAU,aA9BQ,SAAApC,GACtB,IAAQuE,EAAuBb,EAAvBa,SAAUC,EAAad,EAAbc,SACVC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,IAEf,OACE,oCACE,wBAAItC,UAAU,6BACZ,uBAAGA,UAAU,6CAAb,YACA,4BAAQA,UAAU,0BACdmC,EADJ,OAIF,wBAAInC,UAAU,6BACZ,uBAAGA,UAAU,6CAAb,gBACA,4BAAQA,UAAU,2BACF,iBAAXoC,GAA8BR,QAAQ,GAD3C,OAIF,wBAAI5B,UAAU,6BACZ,uBAAGA,UAAU,yCAAb,QACA,4BAAQA,UAAU,0BACdqC,EADJ,OFIsB,SAAAC,GAC9B,OAAGA,GAAO,GAAKA,EAAM,GAAW,eACxBA,GAAO,IAAMA,EAAM,GAAW,eAC9BA,GAAO,IAAMA,EAAM,IAAY,eAC/BA,GAAO,KAAOA,EAAM,IAAY,eAChCA,GAAO,KAAOA,EAAM,IAAY,eAChCA,GAAO,KAAOA,EAAM,IAAY,eAChCA,GAAO,KAAOA,EAAM,IAAY,eAChCA,GAAO,KAAOA,EAAM,IAAY,oBAAnC,EEXoBC,CAAkBD,MAUrCE,K,kBC/BKC,G,OAAS,SAAC,GAAkB,IAAhBjF,EAAe,EAAfA,SACvB,EAA0BM,mBAASjB,OAAO6F,YAA1C,mBAAQC,EAAR,KAAcC,EAAd,KAEA7C,qBAAW,SAAAnC,GACTf,OAAOgG,iBAAiB,UAAU,SAAAjF,GAAC,OAAIgF,EAAQ/F,OAAO6F,eACtD7F,OAAOgG,iBAAiB,kBAAkB,SAAAjF,GAAC,OAAIgF,EAAQ/F,OAAO6F,iBAC7D,IAEH,IAA2BpF,EAuE3B,OAAoC,IAAjCwF,OAAOC,KAAKvF,GAAUwF,OAAsB,KAE7C,oCACIL,EAAO,MA1EcrF,EA0EYE,EAASyF,MAxE5C,wBAAIjD,UAAU,eAEZ1C,EAAK4F,KAAK,SAACC,EAAGC,GACZ,IAAQzB,EAA8BwB,EAA9BxB,KAAME,EAAwBsB,EAAxBtB,WAAYR,EAAY8B,EAAZ9B,QAClBgC,EAAa1B,EAAb0B,IAAKC,EAAQ3B,EAAR2B,IACLC,EAA0B1B,EAA1B0B,IAAKC,EAAqB3B,EAArB2B,MAAOC,EAAc5B,EAAd4B,IAAKC,EAAS7B,EAAT6B,KAErBC,GAAU,IAAI7B,MAAOC,UAAYqB,EACjCQ,EAAmB9B,KAAK+B,MAAQ,MAAsBT,EAE1D,OACE,wBAAIpD,UAAU,4BAA4B8D,IAAKV,GAC7C,uBAAGpD,UAAU,0CACTQ,EAAOmD,GADX,KACyBA,EADzB,OAEIjD,EAAU,IAAIoB,KAAK8B,GAAkBlD,YAFzC,OAGI,IAAIoB,KAAK8B,GAAkB5B,eAE/B,yBAAKT,IAAKZ,EAAQU,EAAQ,GAAGT,IAAKY,IAAKH,EAAQ,GAAGC,KAAMtB,UAAU,sBAClE,6BACE,uBAAGA,UAAU,iDACRyB,KAAKC,OAAO2B,EAAMC,GAAO,EAAI,QAAS1B,QAAQ,GADnD,SAGA,uBAAG5B,UAAU,qDAAb,cACgByB,KAAKC,OAAO6B,EAAMC,EAAQC,EAAMC,GAAQ,EAAI,QAAS9B,QAAQ,GAD7E,gBAYc,SAAAtE,GAC1B,OACE,kBAAC,IAAD,CACEyG,cAAe,EACfC,MAAM,EACNhE,UAAU,UAGR1C,EAAK4F,KAAK,SAACC,EAAGC,GACZ,IAAQzB,EAA8BwB,EAA9BxB,KAAME,EAAwBsB,EAAxBtB,WAAYR,EAAY8B,EAAZ9B,QAE1B,OACE,kBAAC,IAAD,CAAarB,UAAU,4BAA4B8D,IAAKV,GACtD,uBAAGpD,UAAU,0CACVQ,GAAO,IAAIsB,MAAOC,WAAaqB,EAAI,IADtC,MAC6C,IAAItB,MAAOC,WAAaqB,EAAI,GADzE,OAEG1C,EAAS,IAAIoB,KAAKA,KAAK+B,MAAQ,OAAuBT,EAAI,IAAI1C,YAFjE,OAGG,IAAIoB,KAAKA,KAAK+B,MAAQ,OAAuBT,EAAI,IAAIpB,eAExD,yBAAKT,IAAKZ,EAAQU,EAAQ,GAAGT,IAAKY,IAAKH,EAAQ,GAAGC,KAAMtB,UAAU,sBAClE,6BACE,uBAAGA,UAAU,iDACTyB,KAAKC,OAAOC,EAAK0B,IAAM1B,EAAK2B,KAAO,EAAI,QAAS1B,QAAQ,GAD5D,SAGA,uBAAG5B,UAAU,qDAAb,cACeyB,KAAKC,OAAOG,EAAW0B,IAAM1B,EAAW2B,MAAQ3B,EAAW4B,IAAM5B,EAAW6B,MAAQ,EAAI,QAAS9B,QAAQ,GADxH,eAeyCqC,CAAoBzG,EAASyF,U,kBCrF3EiB,EAAQ,SAAC,GAAD,QAAGnG,YAAH,MAAU,YAAV,SACnB,6BAASiC,UAAU,SACjB,yBAAKuB,IAAM4C,IAAQ3C,IAAI,QAAQxB,UAAU,gBACzC,uBAAGA,UAAU,8BAAb,sBAA6D,0BAAMA,UAAU,gBAAgBjC,MCIpFqG,EAAMC,aAFK,SAAAlH,GAAK,MAAK,CAAEG,KAAMH,EAAMG,QAE7B+G,EACjB,SAAAzG,GACE,IAAMX,EAAQY,cACd,EAA8BZ,EAAMqC,WAAWhC,KAAvCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SAGjB,OAAwC,IAApCsF,OAAOwB,OAAQ/G,GAAUyF,OAAsB,KAC9B,OAAhBzF,EAAQqB,IAAqB,kBAAC,EAAD,CAAOb,KAAMd,EAAMqC,WAAW7B,SAE9D,8BACE,kBAAC,EAAD,CAAWF,QAASA,IACpB,kBAAC,EAAD,CAAQC,SAAUA,IAClB,kBAAC,EAAD,CAAMD,QAASA,QCNvBgH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUxH,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACmH,EAAD,QAGJM,SAASC,eAAe,SZ2GpB,kBAAmBlF,WACrBA,UAAUmF,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEd9F,OAAM,SAAAa,GACLX,QAAQW,MAAMA,EAAMkF,c","file":"static/js/main.37355dec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/006-thunderstorm.a3ae7e9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/019-raining.f334d20a.svg\";","module.exports = __webpack_public_path__ + \"static/media/023-rain-4.66e73bdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/016-snowing-1.d416e972.svg\";","module.exports = __webpack_public_path__ + \"static/media/031-cloudy.a510d1e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/013-sunny.fa3a4662.svg\";","module.exports = __webpack_public_path__ + \"static/media/035-cloud.e12bfaaf.svg\";","module.exports = __webpack_public_path__ + \"static/media/empty.25fc67bb.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers';\n\nexport const initialState = {\n  data: {\n    current: {},\n    forecast: {}\n  },\n  search: ''\n}\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)","export const rootReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'SET_CURRENT':\n      return {\n        ...state,\n        data: { ...state.data, current: payload }\n      }; \n\n    case 'SET_FORECAST':\n      return {\n        ...state,\n        data: { ...state.data, forecast: payload }\n      }; \n\n    case 'HANDLE_SEARCH':\n      return {\n        ...state,\n        search: payload\n      }\n\n    default: \n      return { \n        ...state \n      };\n  }\n}","import React, {useEffect, useState, useCallback} from 'react';\nimport { useStore, useDispatch } from 'react-redux';\nimport { handleSearch, setCurrent, setForecast } from '../../redux/actions';\n\nexport const Search = _ => {\n  const store = useStore();\n  const [city, setCity] = useState(''); \n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if(city && city.trim() !== '') {\n      return pushDataToState(city);\n    }\n  }\n\n  const pushDataToState = search => {\n    return fetch(`https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=bdb758c73d929483146ad6c4d174a694`)\n    .then( response => response.json())\n    .then( data => {\n      dispatch(setCurrent(data));\n\n      if(data.cod === '404') return;\n      else {\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&exclude=current,minutely,hourly,alerts&appid=bdb758c73d929483146ad6c4d174a694`)\n          .then( response => response.json())\n          .then( data => dispatch(setForecast(data)))\n          .catch( err => console.log(err));\n      }\n    })\n  };\n\n  const handleCity = (e) => setCity(e.target.value);\n\n  const fetchCity = (city) => {\n    setCity(city);\n    dispatch(handleSearch(city));\n    pushDataToState(store.getState().search);\n  }\n\n  const getCityByLocation = useCallback(() => {\n    if('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          fetch('https://ipinfo.io/json?token=839702aade76be')\n            .then(res => res.json())\n            .then(data => {\n              fetchCity(data.city);\n            })\n        }, \n        error => {\n          fetchCity('Kiyv');\n        }\n      );\n      \n    } else {\n      fetchCity('Kiyv');\n    }\n  }, [dispatch]);\n  \n  useEffect(() => {\n    getCityByLocation();\n  }, [getCityByLocation])\n\n  return(\n    <form className=\"search__bar\" onSubmit={ handleSubmit }>\n      <input \n        type=\"text\" \n        placeholder=\"Your City\" \n        value={city}\n        className=\"text--reg search__input\"\n        onChange={ handleCity }\n        onBlur={handleSubmit}\n      />\n      <span className=\"search__input-bg\"></span>\n\n      <input \n        type=\"submit\"\n        className=\"search__button\"\n        value=''\n      />\n    </form>\n  )\n}","export const setCurrent = payload => {\n  return { \n    type: 'SET_CURRENT',\n    payload\n  }\n};\n\nexport const setForecast = payload => {\n  return { \n    type: 'SET_FORECAST',\n    payload\n  }\n};\n\nexport const handleSearch = payload => {\n  return {\n    type: 'HANDLE_SEARCH',\n    payload\n  }\n}","import React from 'react';\n\nexport const Background = _ => {\n  return(\n    <div className=\"app__background-wrapper\">\n      <div className=\"app__background\"></div>\n    </div>\n  )\n}","import Thunderstorm from '../img/forecast/006-thunderstorm.svg';\nimport Drizzle from '../img/forecast/019-raining.svg'; \nimport Rain from '../img/forecast/023-rain-4.svg'; \nimport Snow from '../img/forecast/016-snowing-1.svg';\nimport Atmosphere from '../img/forecast/031-cloudy.svg';\nimport Clear from '../img/forecast/013-sunny.svg';   \nimport Clouds from '../img/forecast/035-cloud.svg';   \n\nexport const getDay = number => {\n  const days = [ 'Wen', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue' ];\n  \n  return days[number % 7];\n}\n\nexport const getMonth = number => {\n  const months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\n  \n  return months[number];\n}\n\nexport const getIcon = id => {\n  if(id >= 200 && id < 300) return Thunderstorm;\n  else if(id >= 300 && id < 400) return Drizzle;\n  else if(id >= 500 && id < 600) return Rain;\n  else if(id >= 600 && id < 700) return Snow;\n  else if(id >= 700 && id < 800) return Atmosphere;\n  else if(id === 800) return Clear;\n  else if(id >= 801 && id < 900) return Clouds;\n}\n\nexport const getWindDirection = deg => {\n  if(deg >= 0 && deg < 45) return '🡬';\n  else if(deg >= 45 && deg < 90) return '🡩';\n  else if(deg >= 90 && deg < 135) return '🡭';\n  else if(deg >= 135 && deg < 180) return '🡪';\n  else if(deg >= 180 && deg < 225) return '🡮';\n  else if(deg >= 225 && deg < 270) return '🡫';\n  else if(deg >= 270 && deg < 315) return '🡯';\n  else if(deg >= 315 && deg < 360) return '🡨';\n}","import React from 'react';\nimport { getIcon, getDay, getMonth } from '../../utils/functions';\n\nexport const Dashboard = ({ current }) => {\n  const { weather, main } = current;\n\n  if(current.cod === '404') return null;\n  return(\n    <section className=\"dashboard\">\n      <div className=\"dashboard__icon\">\n        <img src={getIcon(weather[0].id)} alt={getIcon(weather[0].main)} className=\"dashboard__icon-image\"/>\n        <p className=\"text text--reg dashboard__icon-text\">\n          {weather[0].main}\n        </p>\n      </div>\n      <div className=\"dashboard__temperature\">\n        <h1 className=\"text text--header dashboard__temperature-text--main\">\n          {(Math.round(main.temp - 273.15)).toFixed(1)}&deg;C\n        </h1>\n        <h3 className=\"text text--orange text--header dashboard__temperature-text--fl\">\n          Feels like {(Math.round(main.feels_like - 273.15)).toFixed(1)}&deg;C\n        </h3>\n      </div>\n      <div className=\"dashboard__date\">\n        <p className=\"text text--reg dashboard__date-text\">\n          {getDay(new Date().getDate())}, <span className=\"text--orange\">{new Date().getDate()} {getMonth(new Date().getMonth())} {new Date().getFullYear()}</span>\n        </p>\n      </div> \n    </section>\n  );\n};\n","import React from 'react';\nimport { getWindDirection } from '../../utils/functions';\n\nexport const Info = ({ current }) => {\n  const { main, wind } = current;\n\n  const createInfoItems = _ => {\n    const { humidity, pressure } = main;\n    const { speed, deg } = wind;\n\n    return(\n      <>\n        <li className=\"text text--reg info__item\">\n          <p className=\"text info__text--key info__text--humidity\">Humidity</p>\n          <strong className=\"text info__text--value\">\n            { humidity} %\n          </strong>\n        </li>\n        <li className=\"text text--reg info__item\">\n          <p className=\"text info__text--key info__text--pressure\">Air pressure</p>\n          <strong className=\"text info__text--value\">\n            { (pressure * 0.750063755419211).toFixed(2) }mm\n          </strong>\n        </li>\n        <li className=\"text text--reg info__item\">\n          <p className=\"text info__text--key info__text--wind\">Wind</p>\n          <strong className=\"text info__text--value\">\n            { speed }m/s { getWindDirection( deg ) }\n          </strong>\n        </li>\n      </>\n    )\n  }\n\n  if(current.cod === '404') return null;\n  return(\n    <ul className=\"list info\">\n      { createInfoItems() }\n    </ul>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\n\nimport { getIcon, getDay, getMonth } from '../../utils/functions';\n\nexport const Slider = ({ forecast }) => {\n  const [ size, setSize ] = useState(window.innerWidth);\n  \n  useEffect( _ => {\n    window.addEventListener('resize', _ => setSize(window.innerWidth));\n    window.addEventListener('rotationchange', _ => setSize(window.innerWidth));\n  }, [])\n\n  const renderStaticSlides = data => {\n    return(\n      <ul className=\"list slider\">\n      {\n        data.map( (i, k) => {\n          const { temp, feels_like, weather } = i;\n          const { min, max } = temp;\n          const { day, night, eve, morn } = feels_like;\n\n          let nextDay = new Date().getDate() + k;\n          let nextDayTimestamp = Date.now() + 1000 * 60 * 60 * 24 * k;\n\n          return(\n            <li className=\"text--center slider__item\" key={k}>\n              <p className=\"text text--reg slider__item-text--date\">\n                { getDay(nextDay) }, { nextDay }&nbsp; \n                { getMonth( new Date(nextDayTimestamp).getMonth()) }&nbsp; \n                { new Date(nextDayTimestamp).getFullYear() }\n              </p>\n              <img src={getIcon(weather[0].id)} alt={weather[0].main} className=\"slider__item-logo\"/>\n              <div>\n                <p className=\"text text--reg slider__item-text--temperature\">\n                  { (Math.round((min + max) / 2 - 273.15)).toFixed(1) }&deg;C\n                </p>\n                <p className=\"text text--orange text--reg slider__item-text--fl\">\n                  Feels like { (Math.round((day + night + eve + morn) / 4 - 273.15)).toFixed(1) }&deg;C\n                </p>\n              </div>\n            </li>\n          )\n        }) \n      }\n      </ul>\n    ) \n  };\n\n  const renderDynamicSlides = data => {\n    return(\n      <Swiper\n        slidesPerView={3}\n        loop={false}\n        className=\"slider\"\n      >\n        {\n          data.map( (i, k) => {\n            const { temp, feels_like, weather } = i;\n  \n            return(\n              <SwiperSlide className=\"text--center slider__item\" key={k}>\n                <p className=\"text text--reg slider__item-text--date\">\n                  {getDay(new Date().getDate() + (k + 1))}, {new Date().getDate() + (k + 1)}&nbsp; \n                  {getMonth(new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getMonth())}&nbsp; \n                  {new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getFullYear()}\n                </p>\n                <img src={getIcon(weather[0].id)} alt={weather[0].main} className=\"slider__item-logo\"/>\n                <div>\n                  <p className=\"text text--reg slider__item-text--temperature\">\n                    {(Math.round((temp.min + temp.max) / 2 - 273.15)).toFixed(1)}&deg;C\n                  </p>\n                  <p className=\"text text--orange text--reg slider__item-text--fl\">\n                    Feels like {(Math.round((feels_like.day + feels_like.night + feels_like.eve + feels_like.morn) / 4 - 273.15)).toFixed(1)}&deg;C\n                  </p>\n                </div>\n              </SwiperSlide>\n            )\n          }) \n        }\n      </Swiper>\n    ) \n  };\n\n  if(Object.keys(forecast).length === 0 ) return null;\n  return (\n    <>\n      { size > 1024 ? renderStaticSlides(forecast.daily) : renderDynamicSlides(forecast.daily) }\n    </>\n  )\n}","import React from 'react';\nimport Storm from '../../img/forecast/empty.svg';\n\nexport const Empty = ({ city = 'city name'}) => (\n  <section className=\"empty\">\n    <img src={ Storm } alt=\"Empty\" className=\"empty__icon\"/>\n    <p className=\"text text--reg empty__text\">Can't get data for <span className=\"text--orange\">{city}</span></p>\n  </section>\n)","import React from 'react';\nimport { Dashboard } from './components/Info/Dashboard';\nimport { Info } from './components/Info/Info';\nimport { Slider } from './components/Slider/Slider';\n\nimport { useStore, connect } from 'react-redux';\nimport { Empty } from './components/Empty/Empty';\n\nconst mapStateToProps = state => ({ data: state.data  });\n\nexport const App = connect(mapStateToProps)(\n  _ => {\n    const store = useStore();\n    const { current, forecast } = store.getState().data;\n\n    // empty\n    if( Object.values( current ).length === 0 ) return null;\n    if( +current.cod === 404 ) return <Empty city={store.getState().search} /> ;\n    return(\n      <main>\n        <Dashboard current={current} />\n        <Slider forecast={forecast} />\n        <Info current={current} />\n      </main>\n    )\n  }\n)","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport { Search } from '../src/components/Search/Search';\n\nimport './scss/main.scss';\nimport { Background } from './components/Background/Background';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Background/>\n      <Search />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}